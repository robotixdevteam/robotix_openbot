// Generated by view binder compiler. Do not edit!
package org.openbot.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.openbot.R;
import org.openbot.customview.OverlayView;

public final class FragmentAutopilotBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final ConstraintLayout aiBottomSheet;

  @NonNull
  public final SwitchCompat autoSwitch;

  @NonNull
  public final ImageView cameraToggle;

  @NonNull
  public final ControlButtonsBinding controllerContainer;

  @NonNull
  public final Spinner deviceSpinner;

  @NonNull
  public final TextView inferenceInfo;

  @NonNull
  public final TextView inputResolution;

  @NonNull
  public final TextView ipAddress;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final ImageView minus;

  @NonNull
  public final Spinner modelSpinner;

  @NonNull
  public final ImageView plus;

  @NonNull
  public final Spinner serverSpinner;

  @NonNull
  public final TextView threads;

  @NonNull
  public final OverlayView trackingOverlay;

  @NonNull
  public final CheckBox usbToggle;

  @NonNull
  public final View view;

  private FragmentAutopilotBinding(@NonNull CoordinatorLayout rootView,
      @NonNull ConstraintLayout aiBottomSheet, @NonNull SwitchCompat autoSwitch,
      @NonNull ImageView cameraToggle, @NonNull ControlButtonsBinding controllerContainer,
      @NonNull Spinner deviceSpinner, @NonNull TextView inferenceInfo,
      @NonNull TextView inputResolution, @NonNull TextView ipAddress,
      @NonNull LinearLayout linearLayout, @NonNull ImageView minus, @NonNull Spinner modelSpinner,
      @NonNull ImageView plus, @NonNull Spinner serverSpinner, @NonNull TextView threads,
      @NonNull OverlayView trackingOverlay, @NonNull CheckBox usbToggle, @NonNull View view) {
    this.rootView = rootView;
    this.aiBottomSheet = aiBottomSheet;
    this.autoSwitch = autoSwitch;
    this.cameraToggle = cameraToggle;
    this.controllerContainer = controllerContainer;
    this.deviceSpinner = deviceSpinner;
    this.inferenceInfo = inferenceInfo;
    this.inputResolution = inputResolution;
    this.ipAddress = ipAddress;
    this.linearLayout = linearLayout;
    this.minus = minus;
    this.modelSpinner = modelSpinner;
    this.plus = plus;
    this.serverSpinner = serverSpinner;
    this.threads = threads;
    this.trackingOverlay = trackingOverlay;
    this.usbToggle = usbToggle;
    this.view = view;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAutopilotBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAutopilotBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_autopilot, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAutopilotBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.aiBottomSheet;
      ConstraintLayout aiBottomSheet = rootView.findViewById(id);
      if (aiBottomSheet == null) {
        break missingId;
      }

      id = R.id.auto_switch;
      SwitchCompat autoSwitch = rootView.findViewById(id);
      if (autoSwitch == null) {
        break missingId;
      }

      id = R.id.camera_toggle;
      ImageView cameraToggle = rootView.findViewById(id);
      if (cameraToggle == null) {
        break missingId;
      }

      id = R.id.controllerContainer;
      View controllerContainer = rootView.findViewById(id);
      if (controllerContainer == null) {
        break missingId;
      }
      ControlButtonsBinding binding_controllerContainer = ControlButtonsBinding.bind(controllerContainer);

      id = R.id.device_spinner;
      Spinner deviceSpinner = rootView.findViewById(id);
      if (deviceSpinner == null) {
        break missingId;
      }

      id = R.id.inference_info;
      TextView inferenceInfo = rootView.findViewById(id);
      if (inferenceInfo == null) {
        break missingId;
      }

      id = R.id.inputResolution;
      TextView inputResolution = rootView.findViewById(id);
      if (inputResolution == null) {
        break missingId;
      }

      id = R.id.ipAddress;
      TextView ipAddress = rootView.findViewById(id);
      if (ipAddress == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = rootView.findViewById(id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.minus;
      ImageView minus = rootView.findViewById(id);
      if (minus == null) {
        break missingId;
      }

      id = R.id.model_spinner;
      Spinner modelSpinner = rootView.findViewById(id);
      if (modelSpinner == null) {
        break missingId;
      }

      id = R.id.plus;
      ImageView plus = rootView.findViewById(id);
      if (plus == null) {
        break missingId;
      }

      id = R.id.server_spinner;
      Spinner serverSpinner = rootView.findViewById(id);
      if (serverSpinner == null) {
        break missingId;
      }

      id = R.id.threads;
      TextView threads = rootView.findViewById(id);
      if (threads == null) {
        break missingId;
      }

      id = R.id.tracking_overlay;
      OverlayView trackingOverlay = rootView.findViewById(id);
      if (trackingOverlay == null) {
        break missingId;
      }

      id = R.id.usbToggle;
      CheckBox usbToggle = rootView.findViewById(id);
      if (usbToggle == null) {
        break missingId;
      }

      id = R.id.view;
      View view = rootView.findViewById(id);
      if (view == null) {
        break missingId;
      }

      return new FragmentAutopilotBinding((CoordinatorLayout) rootView, aiBottomSheet, autoSwitch,
          cameraToggle, binding_controllerContainer, deviceSpinner, inferenceInfo, inputResolution,
          ipAddress, linearLayout, minus, modelSpinner, plus, serverSpinner, threads,
          trackingOverlay, usbToggle, view);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
